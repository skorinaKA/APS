#include "server.h"

Server::Server(Statistic& stat) :
	userSize_(stat.getUserAmount()),
	reqSize_(stat.getRequestAmount())
{
    for (int i = 0; i < userSize_; i++)
    {
        User user(i, stat.getLambda());
        userVector_.push_back(user);
    }

    for (int i = 0; i < reqSize_; i++)
    {
        if (userSize_ != 1 && userVector_[0].getRequestTime() > userVector_[1].getRequestTime())
        {
            std::sort(userVector_.begin(), userVector_.end(), [](User& a, User& b) {return a.getRequestTime() < b.getRequestTime(); });
        }
        reqVector_.push_back(userVector_[0].generation());
    }
    std::sort(reqVector_.begin(), reqVector_.end(), [](const requestPointer& a, const requestPointer& b) {return a->getStartTime() < b->getStartTime(); });
}

User Server::getUser(size_t num)
{
    if (num < userSize_)
    {
        return userVector_[num];
    }
}

requestPointer Server::getRequest(size_t num)
{
    if (num < reqSize_)
    {
        return reqVector_[num];
    }
}

requestPointer Server::getRequest(size_t num, step& step)
{
    if (num < reqSize_)
    {
        step.time = reqVector_[num]->getStartTime();
        for (int i = 0; i < step.userStateVector.size(); i++)
        {
            step.userStateVector[i] = nullptr;
        }
        step.userStateVector[reqVector_[num]->getUserNumber()] = reqVector_[num];
        step.actionString = "Request " + std::to_string(reqVector_[num]->getUserNumber() + 1) + "." + std::to_string(reqVector_[num]->getRequestNumber()) + " generated by user.";
        step.stepNumber++;
        return reqVector_[num];
    }
}
